package main

import (
	"bufio"
	"bytes"
	"database/sql"
	"fmt"
	"log"
	"os"
	"text/template"

	_ "github.com/godror/godror"
)

func crear(db *sql.DB) {
	stmt, err := db.Prepare(`CREATE SEQUENCE mi_secuencia START WITH 1`)
	if err != nil {
		log.Fatal(err)
	}
	_, err = stmt.Exec()
	if err != nil {
		log.Fatal(err)
	}

	createTableStmt := `CREATE TABLE mi_tabla4 (
		ID NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
		NOMBRE VARCHAR2(50),
		EDAD NUMBER
	)`

	alterTableStmt := `ALTER TABLE mi_tabla4 MODIFY (ID GENERATED BY DEFAULT AS IDENTITY (START WITH 1))`

	_, err = db.Exec(createTableStmt)
	if err != nil {
		log.Fatal(err)
	}
	_, err = db.Exec(alterTableStmt)
	if err != nil {
		log.Fatal(err)

	}
	fmt.Println("Tabla creada con Ã©xito")
}
func actualizar(db *sql.DB) {
	stmt, err := db.Prepare("UPDATE mi_tabla4 SET EDAD = :edad WHERE ID = :id")
	if err != nil {
		// Manejo de error
	}

	result, err := stmt.Exec(sql.Named("edad", 30), sql.Named("id", 1))
	if err != nil {
		// Manejo de error
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		// Manejo de error
	}

	fmt.Printf("%d fila(s) actualizada(s)\n", rowsAffected)
}
func insertar(db *sql.DB) {
	stmt, err := db.Prepare("INSERT INTO mi_tabla4(NOMBRE, EDAD) VALUES (:nombre, :edad)")
	if err != nil {
		log.Fatal(err)
	}
	res, err := stmt.Exec(sql.Named("nombre", "IVAN"), sql.Named("edad", 32))
	if err != nil {
		log.Fatal(err)
	}
	num, err := res.RowsAffected()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("Se han insertado %d filas\n", num)
}
func consulta(db *sql.DB) {
	rows, err := db.Query("SELECT * FROM mi_tabla4")
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		var columna1 int
		var columna2 string
		var columna3 int
		err = rows.Scan(&columna1, &columna2, &columna3)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(columna1, columna2, columna3)
	}
	err = rows.Err()
	if err != nil {
		log.Fatal(err)
	}
}

type Config struct {
	Username string
	Password string
	Host     string
	Port     int
	SID      string
}

const connStr = "{{.Username}}/{{.Password}}@{{.Host}}:{{.Port}}/{{.SID}}"

func conectar() {
	config := Config{
		Username: "system",
		Password: "ivan",
		Host:     "192.168.1.8",
		Port:     1521,
		SID:      "XE",
	}
	var connBuffer bytes.Buffer
	tmpl, err := template.New("conn").Parse(connStr)
	if err != nil {
		log.Fatal(err)
	}
	if err := tmpl.Execute(&connBuffer, config); err != nil {
		log.Fatal(err)
	}
	connectionString := connBuffer.String()
	// connectionString := "system/ivan@//192.168.1.8:1521/xe"
	db, err := sql.Open("godror", connectionString)
	if err != nil {
		log.Fatal(err)
	}
	defer db.Close()
	// actualizar(db)
	// insertar(db)
	consulta(db)
	// limpiar(db)
	// crear(db)
}
func limpiar(db *sql.DB) {
	_, err := db.Exec("TRUNCATE TABLE mi_tabla4")
	if err != nil {
		log.Fatal(err)
	}

	_, err = db.Exec("ALTER SEQUENCE mi_secuencia RESTART START WITH 1")
	if err != nil {
		log.Fatal(err)
	}
}
func main() {
	file, err := os.Open("archivos/codigo.txt")
	if err != nil {
		fmt.Println("Error al abrir el archivo:", err)
		return
	}
	defer file.Close()
	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)
	myMap := make(map[string]string)
	i := 1
	clave := []string{}
	valor := []string{}
	for scanner.Scan() {
		if i%2 != 0 {
			clave = append(clave, scanner.Text())
		} else {
			valor = append(valor, scanner.Text())
		}
		i++
	}
	for j := 0; j < len(clave); j++ {
		myMap[clave[j]] = valor[j]
	}
	// fmt.Println(myMap)
	conectar()
}
