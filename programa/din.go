package main

import (
	"bufio"
	"bytes"
	"database/sql"
	"fmt"
	"io/ioutil"
	"log"
	"os"
	"text/template"
	"time"

	_ "github.com/godror/godror"
)

type Config struct {
	Username string
	Password string
	Host     string
	Port     int
	SID      string
}

const connStr = "{{.Username}}/{{.Password}}@{{.Host}}:{{.Port}}/{{.SID}}"

func conectar() *sql.DB {
	config := Config{
		Username: "system",
		Password: "ivan",
		Host:     "192.168.1.8",
		Port:     1521,
		SID:      "XE",
	}
	var connBuffer bytes.Buffer
	tmpl, err1 := template.New("conn").Parse(connStr)
	if err1 != nil {
		log.Fatal(err1)
	}
	if err2 := tmpl.Execute(&connBuffer, config); err2 != nil {
		log.Fatal(err2)
	}
	connectionString := connBuffer.String()
	db, err3 := sql.Open("godror", connectionString)
	if err3 != nil {
		log.Fatal(err3)
	}
	return db
}
func crearTG(db *sql.DB, tableName string) {
	createTableStmt := "CREATE TABLE " + tableName +
		`(
		ID NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
		NOMBRE VARCHAR2(50),
		ESTADO NUMBER,
		FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		)`
	_, err := db.Exec(createTableStmt)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Tabla creada con éxito")
}
func crearTI(db *sql.DB, tableName string) {
	createTableStmt := "CREATE TABLE " + tableName +
		`(
		ID NUMBER GENERATED BY DEFAULT AS IDENTITY (START WITH 1) NOT NULL,
		PARAMETRO VARCHAR2(50),
		VALOR VARCHAR2(80),
		ESTADO NUMBER,
		FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
		)`
	_, err := db.Exec(createTableStmt)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Tabla creada con éxito")
}
func actualizarTG(db *sql.DB, tableName string, estado int, nombre string) {
	stmt, err := db.Prepare("UPDATE " + tableName +
		" SET ESTADO = :estado WHERE NOMBRE = :nombre")
	if err != nil {
		log.Fatal(err)
	}
	result, err := stmt.Exec(sql.Named("estado", estado),
		sql.Named("nombre", nombre))
	if err != nil {
		log.Fatal(err)
	}
	rowsAffected, err := result.RowsAffected()
	if err != nil {
		log.Fatal(err)
	}
	fmt.Printf("%d fila(s) actualizada(s)\n", rowsAffected)
}
func insertarTG(db *sql.DB, tableName string, nombre string, estado int) {
	stmt, err := db.Prepare("INSERT INTO " +
		tableName + "(NOMBRE, ESTADO) " +
		"VALUES (:nombre, :estado)")
	if err != nil {
		log.Fatal(err)
	}
	_, err = stmt.Exec(sql.Named("nombre", nombre),
		sql.Named("estado", estado))
	if err != nil {
		log.Fatal(err)
	}
}
func insertarTI(db *sql.DB, tableName string, parametro string, valor string, estado int) {
	stmt, err := db.Prepare("INSERT INTO " + tableName +
		"(PARAMETRO, VALOR, ESTADO) " +
		"VALUES (:parametro,:valor,:estado)")
	if err != nil {
		log.Fatal(err)
	}
	_, err = stmt.Exec(
		sql.Named("parametro", parametro),
		sql.Named("valor", valor),
		sql.Named("estado", estado))
	if err != nil {
		log.Fatal(err)
	}
}
func consultaTG(db *sql.DB, tableName string) {
	rows, err := db.Query("SELECT * FROM " + tableName)
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		var columna1 int
		var columna2 string
		var columna3 int
		var columna4 time.Time
		err = rows.Scan(&columna1, &columna2, &columna3, &columna4)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(columna1, columna2, columna3, columna4)
	}
	err = rows.Err()
	if err != nil {
		log.Fatal(err)
	}
}
func consultaTI(db *sql.DB, tableName string) {
	rows, err := db.Query("SELECT * FROM " + tableName)
	if err != nil {
		log.Fatal(err)
	}
	for rows.Next() {
		var columna1 int
		var columna2 string
		var columna3 string
		var columna4 int
		var columna5 time.Time
		err = rows.Scan(&columna1, &columna2, &columna3, &columna4, &columna5)
		if err != nil {
			log.Fatal(err)
		}
		fmt.Println(columna1, columna2, columna3, columna4, columna5)
	}
	err = rows.Err()
	if err != nil {
		log.Fatal(err)
	}
}
func limpiar(db *sql.DB, tableName string) {
	_, err := db.Exec("TRUNCATE TABLE " + tableName)
	if err != nil {
		log.Fatal(err)
	}
}
func operation(path string) {
	file, err := os.Open(path)
	if err != nil {
		log.Fatal(err)
	}
	defer file.Close()
	scanner := bufio.NewScanner(file)
	scanner.Split(bufio.ScanLines)
	i := 1
	parametros := []string{}
	valores := []string{}
	for scanner.Scan() {
		if i%2 != 0 {
			parametros = append(parametros, scanner.Text())
		} else {
			valores = append(valores, scanner.Text())
		}
		i++
	}
	tablaGestion := "TABLA_GESTION"
	tablaInformacion := "TABLA_" + valores[0]
	db := conectar()
	defer db.Close()
	insertarTG(db, tablaGestion, valores[0], 1)
	crearTI(db, tablaInformacion)
	for i := 0; i < len(parametros); i++ {
		insertarTI(db, tablaInformacion, parametros[i], valores[i], 1)
	}
	consultaTG(db, tablaGestion)
	consultaTI(db, tablaInformacion)
}
func main() {
	path := "archivos"
	files, err := ioutil.ReadDir(path)
	if err != nil {
		log.Fatal(err)
	}
	for _, file := range files {
		operation(path + "/" + file.Name())
	}
}
